pipeline {

    agent any

    environment {
        ENVIRONMENT_NAME          = "stg"
        IMAGE_NAME                = "081995/pythonapp-${ENVIRONMENT_NAME}"
        IMAGE_VERSION             = "1.0.0"
        TERRAFORM_VERSION         = "0.12.28"
    }
    stages{
        stage('BUILD AND TEST') {
            agent { label 'master' }
            steps{
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                    // Run Acceptance Test
                    sh 'echo "Acceptance Test"'
                    //Build and Push Docker image
                    sh '''
                        docker build -t ${IMAGE_NAME}:${IMAGE_VERSION} .
                        docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                        docker push ${IMAGE_NAME}:${IMAGE_VERSION}
                    '''
                }
            }
        }

        stage('Deploy Stagging Enviroment'){
            agent {
				docker {
					image 'mcr.microsoft.com/azure-powershell:latest'
				}
			}
            steps {
                withCredentials([azureServicePrincipal(credentialsId: 'azure-principal-service-dev-subs',
                                subscriptionIdVariable: 'subscriptionId',
                                clientIdVariable: 'applicationid',
                                clientSecretVariable: 'applicationsecret',
                                tenantIdVariable: 'tenantid')]) {
                    withCredentials([usernamePassword(credentialsId: 's3-tf-state', passwordVariable: 'SECRET_KEY', usernameVariable: 'ACCESS_KEY')]) {
                    // Deploy blank AKS cluster
                    sh '''
                        apt update && apt install -y wget unzip
                        if [ -e "./terraform" ]; then
                            echo "Terraform installed"
                        else 
                            echo "Install Terraform"
                            wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            rm -rf terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        fi
                        export AWS_ACCESS_KEY_ID="${ACCESS_KEY}"
                        export AWS_SECRET_ACCESS_KEY="${SECRET_KEY}"
                        ./terraform init
                        ./terraform plan -var prefix=${ENVIRONMENT_NAME} -var server_app_id=${subscriptionId} -var client_app_id=${applicationid} -var server_app_secret=${applicationsecret} -var tenant_id=${tenantid} -out tfplan
                        ./terraform apply -auto-approve tfplan
                    '''
                    // Apply manifests file to blank AKS cluster
                    powershell '''
                        # install kubectl
                        Install-AzAksKubectl 

                        # Connect to above cluster
                        Import-AzAksCredential -ResourceGroupName ${ENVIRONMENT_NAME}-rg -Name ${ENVIRONMENT_NAME}-aks

                        # Apply my manifests
                        kubectl apply -f k8s/${ENVIRONMENT_NAME}
                    '''
                    }
                }
            }
        }
    }
    post {
        always {
            node(null) {
                echo 'Cleanup Workspace'
                cleanWs()
            }
        }
    }
}
